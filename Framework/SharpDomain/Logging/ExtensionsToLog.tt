<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<# 
    var levels = new [] { "Trace", "Debug", "Info", "Warn", "Error", "Fatal",  };
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Edit file ILog.tt instead
//     Inspired by NLog to make easier at least one addapter
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace SharpDomain.Logging
{
    using System;

    public static class ExtensionsToLog
    {

<# foreach (var level in levels) { #>
        #region [ <#= level #> level ]
        
        public static bool GetIs<#= level #>Enabled(this ILog logger)
        {
            return logger.GetIsEnabled(LoggingLevel.<#= level #>);
        }

        public static void <#= level #><T>(this ILog logger, T value)
        {
            logger.Log<T>(LoggingLevel.<#= level #>, value);
        }

        public static void <#= level #><T>(this ILog logger, IFormatProvider formatProvider, T value)
        {
            logger.Log<T>(LoggingLevel.<#= level #>, formatProvider, value);
        }

        public static void <#= level #>(this ILog logger, Func<string> messageGenerator)
        {
            logger.Log(LoggingLevel.<#= level #>, messageGenerator);
        }

        public static void <#= level #>(this ILog logger, string message, Exception exception)
        {
            logger.Log(LoggingLevel.<#= level #>, message, exception);
        }

        public static void <#= level #>(this ILog logger, IFormatProvider formatProvider, string message, object arg1)
        {
            logger.Log(LoggingLevel.<#= level #>, formatProvider, message, arg1);
        }

        public static void <#= level #>(this ILog logger, IFormatProvider formatProvider, string message, object arg1, object arg2)
        {
            logger.Log(LoggingLevel.<#= level #>, formatProvider, message, arg1, arg2);
        }

        public static void <#= level #>(this ILog logger, IFormatProvider formatProvider, string message, object arg1, object arg2, object arg3)
        {
            logger.Log(LoggingLevel.<#= level #>, formatProvider, message, arg1, arg2, arg3);
        }

        public static void <#= level #>(this ILog logger, IFormatProvider formatProvider, string message, params object[] args)
        {
            logger.Log(LoggingLevel.<#= level #>, formatProvider, message, args);
        }

        public static void <#= level #>(this ILog logger, string message)
        {
            logger.Log(LoggingLevel.<#= level #>, message);
        }

        public static void <#= level #>(this ILog logger, string message, object arg1)
        {
            logger.Log(LoggingLevel.<#= level #>, message, arg1);
        }

        public static void <#= level #>(this ILog logger, string message, object arg1, object arg2)
        {
            logger.Log(LoggingLevel.<#= level #>, message, arg1, arg2);
        }

        public static void <#= level #>(this ILog logger, string message, object arg1, object arg2, object arg3)
        {
            logger.Log(LoggingLevel.<#= level #>, message, arg1, arg2, arg3);
        }

        public static void <#= level #>(this ILog logger, string message, params object[] args)
        {
            logger.Log(LoggingLevel.<#= level #>, message, args);
        }

        #endregion [ <#= level #> level ]

<# } #>
    }
}